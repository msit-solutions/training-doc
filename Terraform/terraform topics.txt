* In the about scripts iam using Aws cloud provider firstly create an Iam user in aws
  >> give the user the * Programmatic access *Console Access >> attach the administator Access
  Then Download the Excel file contains the Username , Password,Access Key,Secret Key and console link
*Install the vs code in the laptop and go to extenstion in vs-code and install terraform  HashiCorp extenstion .
=================================================================================================================
create a folder in the desktop and got to vs-code and go file section and go to open folder 
create a folder and in the vs-code and create file main.tf 
=====================================================

1 Create a one vpc and subnet
---------------------------------

main.tf 
-----------
provider "aws" {
  region = "us-east-2"
  access_key = "enter the access_key here"
  secret_key = "enter the secret_key here"
}
resource "aws_vpc" "myvpc"{
  cidr_block = "10.0.0.0/24"
  tags = {
    Name = "my_vpc"
  }
}
resource "aws_subnet" "mysubnet" {
  cidr_block = "10.0.0.0/25"
  vpc_id     = aws_vpc.myvpc.id
  tags = {
    Name = "my_subnet"
  }
------------------------------------------------------------
2 Creatation of Ec2 instance attached to the vpc,subnet,internet gateway,routetable
    and security group as code which is hard coded.
-------------------------------------------------------------------
  Creatation of Ec2 instance attached to the vpc,subnet,internet gateway,routetable
   and security group as code which is hard coded.
provider "aws" {
  region = "us-east-2"
  access_key = "enter the access_key here"
  secret_key = "enter the secret_key here"
}

resource "aws_vpc" "myvpc"{
  cidr_block = "10.0.0.0/24"
  tags = {
    Name = "my_vpc"
  }
}

resource "aws_subnet" "mysubnet" {
  cidr_block = "10.0.0.0/25"
  vpc_id     = aws_vpc.myvpc.id
  availability_zone = "us-east-2a"
  tags = {
    Name = "mysubnet"
  }
}
resource "aws_internet_gateway" "my_gateway" {
  vpc_id = aws_vpc.myvpc.id
  tags = {
    Name = "mygateway"
  }
}
resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.myvpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_gateway.id
  }
  tags = {
    Name = "myroutetable"
  }
}
resource "aws_security_group" "my_security" {
  name = new_security
  vpc_id = aws_vpc.myvpc.id
  ingress {
    from_port = 0
    protocol  = "-1"
    to_port   = 0
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port = 0
    protocol  = "-1"
    to_port   = 0
    cidr_blocks = ["0.0.0.0/0"]
  }
}
resource "aws_route_table_association" "my_association" {
  route_table_id = aws_route_table.my_route_table.id
  subnet_id = aws_subnet.mysubnet.id
}
resource "aws_instance" "my_instance" {
  ami = "ami-0fb653ca2d3203ac1"
  instance_type = "t2.micro"
  availability_zone = "us-east-2a"
  subnet_id = aws_subnet.mysubnet.id
  vpc_security_group_ids =  [aws_security_group.my_security.id]
  associate_public_ip_address = true
  key_name = " enter key=pair here"
  tags = {
    Name = "myinstance"
  }
}
====================================================================
3. Creatation of the vpc ,subnet,internet gateway,routetable,Elastic Ip,Nat gateway
    and security group by using variables 

-------------------------------------------------------------------

main.tf 
--------------------
provider "aws"{
  region      = var.aws_region
  access_key  = var.access_key
  secret_key  = var.secret_key
}

# VPC
resource "aws_vpc" "vpc" {
  cidr_block           = var.vpc_cidr_block
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name        = "prod-vpc"    
  }
}

#Public Subnet
resource "aws_subnet" "public-subnet" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block              = var.public_subnet_cidr_block
  availability_zone       = var.availability_zones
  map_public_ip_on_launch = true

  tags = {
    Name        = "prod-public-subnet"
  }
}

# Private Subnet
resource "aws_subnet" "private-subnet" {
  vpc_id                  = aws_vpc.vpc.id
  cidr_block              = var.private_subnet_cidr_block
  availability_zone       = var.availability_zones
  map_public_ip_on_launch = false

  tags = {
    Name        = "prod-private-subnet"
  }
}

# Internet Gateway for Public Subnet
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.vpc.id
  tags = {
    Name        = "prod-public-igw"
  }
}

# Routing table to route traffic for Private Subnet
resource "aws_route_table" "private" {
  vpc_id = aws_vpc.vpc.id
  route {
    cidr_block = var.all_cidr
    gateway_id = aws_internet_gateway.igw.id  
  }
  tags = {
    Name        = "prod-private-routetable"
  }
}

# Routing table to route traffic for Public Subnet
resource "aws_route_table" "public" {
  vpc_id = aws_vpc.vpc.id
  route {
  cidr_block = var.all_cidr              
  gateway_id = aws_internet_gateway.igw.id  
  }
  tags = {
    Name        = "prod-public-routetable"
  }
}

# Route for Internet Gateway
resource "aws_route" "public_internet_gateway" {
  route_table_id         = aws_route_table.public.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.igw.id
}


# Route table associations for  Public  Subnets
resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public-subnet.id
  route_table_id = aws_route_table.public.id
}
# Route table association for private subnets
resource "aws_route_table_association" "private" {
  subnet_id      = aws_subnet.private-subnet.id
  route_table_id = aws_route_table.private.id
}
# Create of Elstic Ip attach to private
 resource "aws_eip" "nateIP" {
   vpc   = true
 }
# Creating the NAT Gateway using subnet_id and allocation_id for private 
 resource "aws_nat_gateway" "NATgw" {
   allocation_id = aws_eip.nateIP.id
   subnet_id = aws_subnet.private-subnet.id

 }

===========================================
var.tf 
------------------------

variable "aws_region" {
  description = "AWS region to create resources"
  default     = "ex: ap-south-1  ( give the region here)"
}
variable "access_key" {
    description = "Iam access key"
    default = "Give a Acces key here from iam user credentials"
}
variable "secret_key" {
    description = "Iam secret key"
    default = "Give a secret key here from iam user credentials"
}

variable "vpc_cidr_block" {
  description = "CIDR block of the vpc"
  default = "10.0.0.0/16"
}

variable "public_subnet_cidr_block" {
  
  description = "CIDR block for Public Subnet"
  default     = "10.0.0.0/24"
}

variable "private_subnet_cidr_block" {

  description = "CIDR block for Private Subnet"
  default     = "10.0.3.0/24"
}

variable "all_cidr" {
  description = "CIDR Block to allow Jenkins Access"
  default = "0.0.0.0/0"
}

variable "availability_zones" {
   
   default     =   "ap-south-1b"
  description = "AZ in which all the resources will be deployed"
}
=====================================================================
==================================================================
4.Install of the jenkins application by using terraform 
============================

main.tf

provider "aws" {
  region      = var.aws_region
  access_key  = var.access_key
  secret_key  = var.secret_key
}
# creation of the Vpc 
resource "aws_vpc" "vpc"{
  cidr_block = var.vpc_cidr_block
  tags = {
    Name = "my-vpc"
  }
}
# creation of the Subnet
resource "aws_subnet" "subnet" {
  cidr_block = var.subnet_cidr_block
  vpc_id     = aws_vpc.vpc.id
  availability_zone = var.availability_zone
   
  tags = {
    Name = "my-subnet"
  }
}
#resource "aws_eip" "eip" {
 # vpc = true
  #tags = {
   # Name = "eip"
 # }
#}

# creation of the Internet gateway
resource "aws_internet_gateway" "gateway" {
  vpc_id = aws_vpc.vpc.id
  tags = {
    Name = "my-gateway"
  }
}
# creation of the route table and route associations
resource "aws_route_table" "route_table" {
  vpc_id = aws_vpc.vpc.id
  route {
    cidr_block = var.all_cidr
    gateway_id = aws_internet_gateway.gateway.id
  }
  tags = {
    Name = "my-routetable"resourcse
  }
}
resource "aws_route_table_association" "route-association" {
  route_table_id = aws_route_table.route_table.id
  subnet_id = aws_subnet.subnet.id
}
# creation of the security group and allow the ports required
resource "aws_security_group" "jenkins_sg" {
  name        = "jenkins_sg"
  description = "Allow Jenkins Traffic"
  vpc_id      = aws_vpc.vpc.id

  ingress {
    description      = "Allow from Personal CIDR block"
    from_port        = 8080
    to_port          = 8080
    protocol         = "tcp"
    cidr_blocks      = [var.all_cidr]
  }

  ingress {
    description      = "Allow SSH from Personal CIDR block"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = [var.all_cidr]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = [var.all_cidr]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "Jenkins SG"
  }
}
# creation of the ec2 instance
 resource "aws_instance" "web" {
  ami             = var.ami-id
  instance_type   = var.instance_type
  key_name        = var.key_name
  security_groups = [aws_security_group.jenkins_sg.id]
  subnet_id       = aws_subnet.subnet.id
  availability_zone = var.availability_zone
  user_data       = file("jenkins-install.sh") #(we are create a file for install and updated the file here)
  associate_public_ip_address = var.associate_public_ip_address

  tags = {
    Name = "Jenkins"
  }
 }
 output "jenkins_endpoint" {
  value = formatlist("http://%s:%s/", aws_instance.web.*.public_ip, "8080")
}
================================
var.tf

variable "aws_region" {
  description = "AWS region to create resources"
  default     = " ex: ap-south-1  ( give the region here) "
}
variable "access_key" {
    description = "Iam access key"
    default =  "Give a Acces key here from iam user credentials"                          
}
variable "secret_key" {
    description = "Iam secret key"
    default =  "Give a secret key here from iam user credentials"                      
}

variable "vpc_cidr_block" {
  description = "VPC for Jenkins"
  default = "10.0.0.0/16"

}
variable "subnet_cidr_block" {
    description = "Subnet for Jenkins"
    default = "10.0.0.0/24"
}
variable "availability_zone" {
    description = "Create a availability zone"
    default = "ap-south-1a" 
    
}

variable "all_cidr" {
  description = "CIDR Block to allow Jenkins Access"
  default = "0.0.0.0/0"
}
variable "ami-id" {
  description = "Ami id for Ec2"
  default = "ami-0851b76e8b1bce90b ( specify the ami id here )"
}

variable "key_name" {
  description = "Name of keypair to ssh"
  default = "( create a key pair first and give the name of the key pair)"
}

variable "associate_public_ip_address" {
    description = "To give acces to public Ip address"
    default = "true"
  
}
variable "instance_type" {
  description = "instance value"
  default = "t2.micro"
}
=====================
jenkins-install.sh
=====================
#!/bin/bash
  sudo apt-get -y update
  # Install OpenJDK 8
  sudo apt-get -y install openjdk-11-jre-headless
  # Install Jenkins
  # (you can upadte the specific version from the link https://www.jenkins.io/doc/book/installing/linux/)
  curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
  sudo apt-get -y update
  sudo apt-get  -y install jenkins
  sudo systemctl start jenkins
  sudo systemctl status jenkins
=====================================================================
go to the aws console and take the public-ip with port no of the jenkins 
paste in the web to see the jenkins dashboard